" Toggle NERDTree
noremap <C-T> :NERDTreeToggle<CR>

" Make bookmarks Visible
let NERDTreeShowBookmarks = 1

"Enable Colors
let NERDChristmasTree = 1

" Nerdcommenter
" ,/ to invert comment on the current line/selection
nmap <leader>/ :call NERDComment(0, "invert")<cr>
vmap <leader>/ :call NERDComment(0, "invert")<cr>

let g:Powerline_symbols = 'fancy'

" Rainbow Paraens
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Vim Airline
let g:airline_powerline_fonts = 1
" the separator used on the left side >
let g:airline_left_sep='>'

" the separator used on the right side >
let g:airline_right_sep='<'

" enable modified detection >
let g:airline_detect_modified=1

" enable paste detection >
let g:airline_detect_paste=1

" enable iminsert detection >
let g:airline_detect_iminsert=0

" determine whether inactive windows should have the left section collapsed to
"  only the filename of that buffer.
let g:airline_inactive_collapse=1

" themes are automatically selected based on the matching colorscheme. this
"  can be overridden by defining a value. >
"  let g:airline_theme=

" if you want to patch the airline theme before it gets applied, you can
"  supply the name of a function where you can modify the palette. >
let g:airline_theme_patch_func = 'AirlineThemePatch'
function! AirlineThemePatch(palette)
  if g:airline_theme == 'badwolf'
    for colors in values(a:palette.inactive)
      let colors[3] = 245
    endfor
  endif
endfunction

" enable/disable automatic population of the `g:airline_symbols` dictionary
"  with powerline symbols. >
"  let g:airline_powerline_fonts=0

" define the set of text to display for each mode.  >
let g:airline_mode_map = {} " see source for the defaults

" unicode symbols
let g:airline_left_sep = '»'
"let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
"let g:airline_right_sep = '◀''
"let g:airline_symbols.linenr = '␊'
"let g:airline_symbols.linenr = '␤'
"let g:airline_symbols.linenr = '¶'
"let g:airline_symbols.branch = '⎇'
"let g:airline_symbols.paste = 'ρ'
"let g:airline_symbols.paste = 'Þ'
"let g:airline_symbols.paste = '∥'
"let g:airline_symbols.whitespace = 'Ξ'

" Color scheme
colorscheme Tomorrow-Night-Eighties
highlight NonText guibg=#060606
highlight Folded  guibg=#0A0A0A guifg=#9090D0
hi IndentGuidesOdd  ctermbg=white
hi IndentGuidesEven ctermbg=green

" Format JSON
autocmd BufNewFile,BufRead *.json call jacinto#syntax()

" Remap multiple cursors
let g:multi_cursor_use_default_mapping=0

" Default mapping Multiple Cursors
let g:multi_cursor_next_key='<C-f>'
let g:multi_cursor_prev_key='<C-b>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" Mustache and Handlebars abbreviations
let g:mustache_abbreviations = 1


" configure syntastic syntax checking to check on open as well as save
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=2
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'

" CNTRLP
" let g:ctrlp_map = '<leader>,'
" let g:ctrlp_cmd = 'CtrlP'
" let g:ctrlp_max_height = 40

" Gundo
nmap <leader>u :GundoToggle<CR>
let g:gundo_close_on_revert = 1

" Tabularize
let mapleader=','
if exists(":Tabularize")
  nmap <Leader>l= :Tabularize /=<CR>
  vmap <Leader>l= :Tabularize /=<CR>
  nmap <Leader>l: :Tabularize /:\zs<CR>
  vmap <Leader>l: :Tabularize /:\zs<CR>
endif

" Unite
let g:unite_source_history_yank_enable = 1
call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap <leader>t :<C-u>Unite -auto-resize -no-split -buffer-name=files   -start-insert file_rec/async:!<cr>
nnoremap <leader>f :<C-u>Unite -auto-resize -no-split -buffer-name=files   -start-insert file<cr>
nnoremap <leader>r :<C-u>Unite -auto-resize -no-split -buffer-name=mru     -start-insert file_mru<cr>
nnoremap <leader>o :<C-u>Unite -auto-resize -no-split -buffer-name=outline -start-insert outline<cr>
nnoremap <leader>y :<C-u>Unite -auto-resize -no-split -buffer-name=yank    history/yank<cr>
nnoremap <leader>e :<C-u>Unite -auto-resize -no-split -buffer-name=buffer  buffer<cr>

" " Custom mappings for the unite buffer
"autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Play nice with supertab
  let b:SuperTabDisabled=1
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction
