let localmapleader = ","
let NERDTreeShowHidden=1

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
"  runtime! macros/matchit.vim
"endif

filetype plugin indent on

augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json

  " ALE linting events
  let g:ale_fixers = {
  \   '*': ['remove_trailing_lines', 'trim_whitespace'],
  \   'javascript': ['eslint'],
  \}
  " Enable ESLint only for JavaScript.
  augroup FiletypeGroup
    autocmd!
    au BufNewFile,BufRead *.jsx set filetype=javascript.jsx
  augroup END
  let b:ale_linters = ['stylelint', 'eslint']
  let b:ale_linter_aliases = ['css']
  let b:ale_linters = ['eslint']
augroup END

" When the type of shell script is /bin/sh, assume a POSIX-compatible
" shell for syntax highlighting purposes.
let g:is_posix = 1

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" Use one space, not two, after punctuation.
set nojoinspaces

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag --literal --files-with-matches --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  if !exists(":Ag")
    command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
    nnoremap \ :Ag<SPACE>
  endif
endif

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

" Numbers
set number
set numberwidth=5

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<Tab>"
    else
        return "\<C-p>"
    endif
endfunction
inoremap <Tab> <C-r>=InsertTabWrapper()<CR>
inoremap <S-Tab> <C-n>

" Fix Python Path (for YCM)
let g:ycm_path_to_python_interpreter="/usr/bin/python"

" Move between linting errors
nnoremap ]r :ALENextWrap<CR>
nnoremap [r :ALEPreviousWrap<CR>

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Always use vertical diffs
set diffopt+=vertical

" Mappings ---------------------- {{{
noremap - ddp
nnoremap <leader>ev :vsplit ~/dotfiles/vimrc.local<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>s :split
nnoremap <leader>S :split <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>v :vsplit
nnoremap <leader>V :vsplit <C-R>=expand("%:p:h") . "/" <CR>
inoremap <esc> <nop>
inoremap jk <esc>
vnoremap jk <esc>
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap in( :<c-u>normal! f(vi(<cr>
nnoremap H 0
nnoremap L $

" Automatic Bracket Setting
inoremap ( ()<Esc>:let leavechar=")"<CR>i
inoremap [ []<Esc>:let leavechar="]"<CR>i
inoremap { {}<Esc>:let leavechar="}"<CR>i
inoremap " ""<Esc>:let leavechar="""<CR>i
inoremap ' ''<Esc>:let leavechar="'"<CR>i

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" bind \ (backward slash) to grep shortcut
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>
" NERDTree
nmap <leader>n :NERDTreeToggle<cr>
" Rename
map <Leader>r :RenameFile<CR>
" Save
map <Leader>w :w<CR>

" Save and Quit
map <Leader>x :x<CR>

" Quit
map <Leader>q :q<CR>

" Search
map <leader>f :%s/
" }}}

" File-type Specific Settings ---------------------- {{{
augroup VimCSS3Syntax
  autocmd!

  autocmd FileType css setlocal iskeyword+=-
augroup END

augroup fileformating
    autocmd!
    autocmd FileType html iabbrev <buffer> lsq &lsquo;
    autocmd FileType html iabbrev <buffer> rsq &rsquo;
    autocmd FileType html iabbrev <buffer> ldq &ldquo;
    autocmd FileType html iabbrev <buffer> rdq &rdquo;
    autocmd FileType html iabbrev <buffer> --n &ndash;
    autocmd FileType html iabbrev <buffer> --m &mdash;
    autocmd FileType javascript onoremap b /return<cr>
    autocmd FileType javascipt nnoremap <buffer> <localleader>c I//<esc>
    autocmd FileType javascript set formatprg=prettier\ --stdin
augroup END

augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
augroup END

" Autocomplete for css,scss,sass https://vimeo.com/118896316
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType scss set omnifunc=csscomplete#CompleteCSS
autocmd FileType sass set omnifunc=csscomplete#CompleteCSS

" Status Line ---------------------- {{{
set statusline=%F        " Path to the file
set statusline+=\ —\     " Separator
set statusline+=%Y       " Path to the file
set statusline+=%h       " Help file flag
set statusline+=%m       " Modified flag
set statusline+=%=       " Switch to the right side
set statusline+=%l       " Current line
set statusline+=/        " Separator
set statusline+=%L       " Total Lines
